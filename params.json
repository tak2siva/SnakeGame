{"name":"Snakegame","tagline":"","body":"<html>\r\n<head>\r\n<script type=\"text/javascript\">\r\nwindow.onload = function() {\r\n//var body = document.getElementsByTagName('body')[0];\r\nvar grid  = document.getElementById('grid');\r\ncanvas = document.createElement('canvas');\r\nctx = canvas.getContext('2d');\r\nsnake = new Array(3);\r\nvar active = true;\r\nvar points = 0;\r\nvar genFoodAfterPlotSnake = true;// Food should be geerated after plotting snake in grid\r\n \r\ncanvas.width = 200;\r\ncanvas.height = 200;\r\n\r\ngrid.appendChild(canvas);\r\n\r\nvar map = new Array(20);\r\n\r\nfor(i=0; i < map.length; i++){\r\n  map[i] = new Array(20);\r\n}\r\n\r\nmap = loadSnake(map);\r\n//map = genFood(map);\r\n\r\nfunction loadSnake(map) {\r\n var x = Math.round( Math.random() * 19);\r\n var y = Math.round( Math.random() * 19);\r\n\r\n while(x < snake.length-1){\r\n  x = Math.round( Math.random() * 19);\r\n}\r\n \r\nfor(i=0; i<snake.length;i++){\r\n  snake[i] = {x:x-i,y:y};\r\n  map[x-i][y] = 's';\r\n}\r\n\r\nreturn map;\r\n}\r\n\r\nfunction genFood(map){\r\n var x = Math.round(Math.random() * 19);\r\n var y = Math.round(Math.random() * 19);\r\n \r\n while(map[x][y] === 's'){\r\n  x = Math.round(Math.random() * 19);\r\n  y = Math.round(Math.random() * 19);  \r\n }\r\n \r\n map[x][y] = 'f';\r\n \r\n return map;\r\n}\r\n\r\nvar direction = 4;\r\n\r\nwindow.addEventListener('keydown', function(e){\r\n  if(e.keyCode === 38 && direction != 3){ \r\n    direction = 1; // UP\r\n  } else if(e.keyCode === 37 && direction != 4){\r\n    direction = 2; // LEFT\r\n  } else if(e.keyCode === 40 && direction != 1){\r\n    direction = 3; // DOWN\r\n  } else if(e.keyCode === 39 && direction != 2){\r\n    direction = 4; // RIGHT\r\n  }\r\n});\r\n\r\nengine();\r\n\r\nfunction updateSnake(){\r\n     var i=0;\r\n     switch(direction){\r\n       case 1: \r\n            snake.cache = {x: snake[i].x, y: snake[i].y};\r\n            snake[i].y =  nextUpCordnate(); \r\n            break;        \r\n\t   case 2: \r\n            snake.cache = {x: snake[i].x, y: snake[i].y};\r\n            snake[i].x =  nextLeftCordnate(); \r\n            break;    \r\n\t   case 3: \r\n            snake.cache = {x: snake[i].x, y: snake[i].y};\r\n            snake[i].y =  nextDownCordnate(); \r\n            break;        \t\t\t\r\n       case 4: \r\n            snake.cache = {x: snake[i].x, y: snake[i].y};\r\n            snake[i].x =  nextRightCordnate();  \r\n            break          \r\n     }\r\n\t \r\n\t // Collision Detect\r\n\t if(map[snake[i].x][snake[0].y] === 's'){\r\n\t   alert(\"Game Over\\nYour score is \" + points);\r\n\t   active = false;\r\n\t }\r\n\t // Food Expands Snake\r\n\t if(map[snake[i].x][snake[i].y] === 'f'){\r\n\t   points += 10;\r\n\t   document.getElementById(\"info\").innerHTML = \" Points: \" + points;\r\n\t   snake.push({x:snake[snake.length-1].x,y:snake[snake.length-1].y});\r\n\t   genFoodAfterPlotSnake = true;\r\n\t } \r\n}\r\n\r\nfunction engine() {\r\n ctx.clearRect(0,0,canvas.width,canvas.height);\r\n setEnv();  \r\n \r\n updateSnake();\r\n\r\n for(i=1; i<snake.length; i++){          \r\n        temp = {x:snake[i].x, y:snake[i].y}\r\n\r\n        snake[i].x = snake.cache.x;\r\n        snake[i].y = snake.cache.y;\r\n               \r\n        snake.cache = {x:temp.x, y:temp.y};        \r\n }\r\n\r\n map = plotSnake(map);\r\n \r\n if(genFoodAfterPlotSnake){\r\n   map = genFood(map)\r\n   genFoodAfterPlotSnake = false;\r\n }\r\n\r\n for(i=0;i<map.length;i++){\r\n   for(j=0;j<map.length;j++){\r\n\tif(map[i][j] === 's'){\r\n         ctx.fillStyle = 'black';\r\n         ctx.fillRect(i*10,j*10,10,10);\r\n     } else if(map[i][j] === 'f') { \r\n\t     ctx.fillStyle = 'green';\r\n         ctx.fillRect(i*10, j*10,10,10);\t\t \r\n     }\t \r\n   }\r\n}\r\n\r\n if(active){\r\n  setTimeout(engine, 150);\r\n }\r\n}\r\n\r\nfunction nextRightCordnate() {\r\n  if(snake[0].x === map.length-1){\r\n     return 0;\r\n  } /*else if(snake[0].x === 0){\r\n     return map.length-1;\r\n  } */else {\r\n     return snake[0].x + 1;\r\n  }   \r\n}\r\n\r\nfunction nextUpCordnate(){ \r\n  if(snake[0].y === 0){\r\n    return map.length-1;\r\n  } /*else if(snake[0].y === 0){\r\n    return map.length-1;\r\n  } */else {\r\n    return snake[0].y - 1;\r\n  }\r\n}\r\n\r\nfunction nextLeftCordnate(){\r\n  if(snake[0].x === 0){\r\n    return map.length - 1;\r\n  } else {\r\n    return snake[0].x - 1;\r\n  }\r\n}\r\n\r\nfunction nextDownCordnate(){\r\n  if(snake[0].y === map.length-1){\r\n    return 0;\r\n  } else {\r\n    return snake[0].y + 1;\r\n  }\r\n}\r\n\r\nfunction plotSnake(map){\r\n   for(i=0;i<snake.length;i++){\r\n     map[snake[i].x][snake[i].y] = 's';\r\n  }\r\n   // To clear the tail after each move\r\n   if(!(snake[snake.length-1].x === snake.cache.x && snake[snake.length-1].y === snake.cache.y)){\r\n   map[snake.cache.x][snake.cache.y] = undefined;\r\n   }\r\n  \r\n  return map;\r\n}\r\n \r\nfunction setEnv(){\r\nctx.linewidth = 2;\r\nctx.strokStyle = 'black';\r\nctx.strokeRect(0,0,canvas.width, canvas.height);\r\n}\r\n\r\n}\r\n</script>\r\n</head>\r\n<body>\r\n<div id=\"info\"> Points: 0</div>\r\n<div id=\"grid\"></div>\r\n</body>\r\n</html>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}